pub fn get_ior(table: IORTable, wavelength: f64) -> Option<(f64, f64)> {
    for (i, &(w2, n2, k2)) in table.iter().enumerate() {
        if w2 > wavelength && i > 0 {
            let (w, n, k) = table[i - 1];

            let nt = n + (wavelength - w) * ((n2 - n) / (w2 - w));
            let kt = k + (wavelength - w) * ((k2 - k) / (w2 - w));

            return Some((nt, kt));
        }
    }

    None
}

pub type IORTable = &'static [(f64, f64, f64)];

pub const GOLD_IOR_TABLE: IORTable = &[
    (4.3678e-01, 1.4493e+00, 1.7988e+00),
    (4.4390e-01, 1.4126e+00, 1.7829e+00),
    (4.5114e-01, 1.3661e+00, 1.7681e+00),
    (4.5850e-01, 1.3095e+00, 1.7567e+00),
    (4.6598e-01, 1.2427e+00, 1.7509e+00),
    (4.7358e-01, 1.1664e+00, 1.7532e+00),
    (4.8130e-01, 1.0821e+00, 1.7661e+00),
    (4.8915e-01, 9.9182e-01, 1.7916e+00),
    (4.9712e-01, 8.9849e-01, 1.8312e+00),
    (5.0523e-01, 8.0543e-01, 1.8852e+00),
    (5.1347e-01, 7.1590e-01, 1.9530e+00),
    (5.2184e-01, 6.3260e-01, 2.0328e+00),
    (5.3035e-01, 5.5731e-01, 2.1222e+00),
    (5.3900e-01, 4.9085e-01, 2.2188e+00),
    (5.4779e-01, 4.3326e-01, 2.3201e+00),
    (5.5672e-01, 3.8405e-01, 2.4245e+00),
    (5.6580e-01, 3.4242e-01, 2.5305e+00),
    (5.7503e-01, 3.0751e-01, 2.6370e+00),
    (5.8440e-01, 2.7843e-01, 2.7434e+00),
    (5.9393e-01, 2.5437e-01, 2.8493e+00),
    (6.0362e-01, 2.3457e-01, 2.9545e+00),
    (6.1346e-01, 2.1841e-01, 3.0587e+00),
    (6.2346e-01, 2.0533e-01, 3.1621e+00),
    (6.3363e-01, 1.9487e-01, 3.2645e+00),
    (6.4396e-01, 1.8664e-01, 3.3662e+00),
    (6.5446e-01, 1.8030e-01, 3.4671e+00),
    (6.6514e-01, 1.7558e-01, 3.5675e+00),
    (6.7598e-01, 1.7227e-01, 3.6674e+00),
    (6.8701e-01, 1.7016e-01, 3.7669e+00),
    (6.9821e-01, 1.6911e-01, 3.8661e+00),
    (7.0959e-01, 1.6897e-01, 3.9653e+00),
    (7.2117e-01, 1.6966e-01, 4.0644e+00),
    (7.3292e-01, 1.7107e-01, 4.1635e+00),
    (7.4488e-01, 1.7313e-01, 4.2629e+00),
    (7.5702e-01, 1.7577e-01, 4.3625e+00),
    (7.6937e-01, 1.7895e-01, 4.4624e+00),
];

pub const COPPER_IOR_TABLE: IORTable = &[
    (4.3340e-01, 1.3389e+00, 2.2984e+00),
    (4.4241e-01, 1.3316e+00, 2.2956e+00),
    (4.5161e-01, 1.3132e+00, 2.2913e+00),
    (4.6100e-01, 1.2832e+00, 2.2880e+00),
    (4.7058e-01, 1.2413e+00, 2.2880e+00),
    (4.8036e-01, 1.1879e+00, 2.2941e+00),
    (4.9035e-01, 1.1240e+00, 2.3088e+00),
    (5.0054e-01, 1.0512e+00, 2.3343e+00),
    (5.1094e-01, 9.7185e-01, 2.3725e+00),
    (5.2157e-01, 8.8859e-01, 2.4247e+00),
    (5.3241e-01, 8.0438e-01, 2.4911e+00),
    (5.4348e-01, 7.2204e-01, 2.5713e+00),
    (5.5477e-01, 6.4392e-01, 2.6639e+00),
    (5.6631e-01, 5.7177e-01, 2.7672e+00),
    (5.7808e-01, 5.0663e-01, 2.8793e+00),
    (5.9010e-01, 4.4894e-01, 2.9983e+00),
    (6.0236e-01, 3.9868e-01, 3.1227e+00),
    (6.1488e-01, 3.5554e-01, 3.2509e+00),
    (6.2767e-01, 3.1902e-01, 3.3821e+00),
    (6.4071e-01, 2.8853e-01, 3.5153e+00),
    (6.5403e-01, 2.6347e-01, 3.6500e+00),
    (6.6763e-01, 2.4324e-01, 3.7857e+00),
    (6.8151e-01, 2.2732e-01, 3.9221e+00),
    (6.9567e-01, 2.1520e-01, 4.0592e+00),
    (7.1014e-01, 2.0645e-01, 4.1967e+00),
    (7.2490e-01, 2.0067e-01, 4.3347e+00),
    (7.3997e-01, 1.9753e-01, 4.4732e+00),
    (7.5535e-01, 1.9675e-01, 4.6121e+00),
    (7.7105e-01, 1.9806e-01, 4.7516e+00),
    (7.8708e-01, 2.0124e-01, 4.8917e+00),
];